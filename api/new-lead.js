import express from 'express'
import dotenv from 'dotenv'
import getFieldsFromComment from './services/get-fields-from-comment.js'
import updateFields from './services/update-fields.js'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config()

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express()
const port = process.env.PORT || 3000

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json())

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async function webhookHandler(req, res) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST'])
    return res.status(405).end(`Method ${req.method} Not Allowed`)
  }

  try {
    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const objectId = req.body.lead_id
    console.log('–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫:', req.body)
    console.log('objectId:', objectId)

    if (!objectId) {
      console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è.')
      return res.status(400).json({ error: 'Invalid data received' })
    }

    const customFields = await getFieldsFromComment(objectId, res)

    console.log(customFields)

    if (customFields.length === 0) {
      console.warn('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –ø–æ–ª–µ text. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.')
      // –û—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã CRM –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞ –∑–∞–ø—Ä–æ—Å.
      // –≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –≤ –¥–∞–Ω–Ω–æ–º –≤–µ–±—Ö—É–∫–µ –Ω–µ –±—ã–ª–æ –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
      return res.status(200).json({ success: true, message: 'Webhook received, but no target fields found to update.' })
    }

    await updateFields(objectId, customFields, res)
    // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    // CRM –ø–æ–ª—É—á–∏—Ç —Å—Ç–∞—Ç—É—Å 200 –∏ –ø–æ–π–º–µ—Ç, —á—Ç–æ –≤–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.
    res.status(200).json({ success: true, message: 'Webhook processed successfully' })
  } catch (error) {
    console.error('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error)
    res.status(500).json({ error: 'Internal Server Error' })
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–∫ POST-—ç–Ω–¥–ø–æ–∏–Ω—Ç
app.post('/api/new-lead', webhookHandler)

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ http://localhost:${port}`)
})

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel (–æ—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏)
export default app
